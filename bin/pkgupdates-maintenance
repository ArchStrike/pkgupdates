#!/usr/bin/env python
"""Use the pkgrepo directory cloned by pkupdates to determine helpful maintenance info
 - deprecated packages that are defined in a pkgupdates conf
 - packages that should, but do not, have a pkgupdates conf
 - packages that are pending and have an active pkgupdates conf
The confs that pkgupdates uses are develversion.conf, archversion.conf, or noversion.txt
"""
import argparse
import json
import re
import requests
import pathlib
import pycman

pkgupdates = pathlib.Path(__file__).resolve().parent.parent
if pkgupdates == pathlib.Path("/usr"):  # check if installed
    pkgupdates = pathlib.Path("/usr/share/pkgupdates")
archversion = pathlib.Path(pkgupdates, 'archversion.conf')
archpkg_re = re.compile(r'^\[(?P<package>(?!DEFAULT).*)\]', re.M)
splitpkg_re = re.compile(r'^pkgname=\((?P<names>[^)]*)\)', re.M)
splitpkg_func_re = re.compile(r'^package_(?P<name>[^( ]*)', re.M)
CONF_NAMES = ('develversion.conf', 'archversion.conf', 'noversion.txt')


def _parse_pkgnames(pkgbuild):
    with pkgbuild.open() as fhandle:
        fcontent = fhandle.read()
    match = splitpkg_re.search(fcontent)
    if match:
        for func_match in splitpkg_func_re.finditer(fcontent):
            yield func_match.group('name')
    else:
        yield pkgbuild.parts[-2]


def get_pending_packages():
    pending = pathlib.Path(pkgupdates, 'pkgrepo', 'pending')
    for pkgbuild in pending.glob('**/PKGBUILD'):
        yield pkgbuild.parts[-2]


def get_pkgrepo_packages():
    archstrike = pathlib.Path(pkgupdates, 'pkgrepo', 'archstrike')
    for pkgbuild in archstrike.glob('**/PKGBUILD'):
        for pkgname in _parse_pkgnames(pkgbuild):
            yield pkgname


def get_develversion_packages():
    develversion = pathlib.Path(pkgupdates, 'develversion.conf')
    with develversion.open() as fhandle:
        for pkgbuild in fhandle.readlines():
            yield pkgbuild.rstrip('\n')


def get_archversion_packages():
    archversion = pathlib.Path(pkgupdates, 'archversion.conf')
    with archversion.open() as fhandle:
        fcontent = fhandle.read()
    for match in archpkg_re.finditer(fcontent):
        yield match.group('package')


def get_noversion_packages():
    noversion = pathlib.Path(pkgupdates, 'noversion.txt')
    with noversion.open() as fhandle:
        fcontent = fhandle.read()
    for match in archpkg_re.finditer(fcontent):
        yield match.group('package')


def find_conf_deprecated(supported_packages, conf_packages, confname):
    deprecated_packages = sorted(conf_packages - supported_packages)
    if deprecated_packages:
        print(f"\033[91m# Deprecated packages from {confname}\033[0m")
        print("\n".join(deprecated_packages))
    return deprecated_packages


def find_conf_missing(packages):
    all_conf_packages = set([])
    for conf in CONF_NAMES:
        all_conf_packages = all_conf_packages.union(packages[conf])
    missing_packages = sorted(packages['pkgrepo'] - all_conf_packages)
    if missing_packages:
        print("\033[91m# Missing configuration packages\033[0m")
        print("\n".join(missing_packages))
    return missing_packages


def find_conf_pending(pending_packages, conf_packages, confname):
    pending_confs = pending_packages.intersection(conf_packages)
    if pending_confs:
        print(f"\033[91m# Pending packages found in {confname}\033[0m")
        print("\n".join(pending_confs))
    return pending_confs


def get_packages():
    packages = {}
    # Find supported packages (PKGBUILD exist in pending or archstrike folder)
    packages['pkgrepo'] = set([p for p in get_pkgrepo_packages()])
    packages['pending'] = set([p for p in get_pending_packages()])
    packages['supported'] = packages['pkgrepo'].union(packages['pending'])
    # Find package names in develversion.conf, archversion.conf, noversion.txt
    packages['develversion.conf'] = set([p for p in get_develversion_packages()])
    packages['archversion.conf'] = set([p for p in get_archversion_packages()])
    packages['noversion.txt'] = set([p for p in get_noversion_packages()])
    return packages


def resolve_missing_urls(missing):
    pacman_config = pycman.config.PacmanConfig('/etc/pacman.conf')
    hpacman = pacman_config.initialize_alpm()
    as_db = None
    for db in hpacman.get_syncdbs():
        if db.name == 'archstrike':
            as_db = db
            break
    status_pkgs = {'1XX': [], '2XX': [], '3XX': [], '4XX': [], '5XX': [], 'EXC': [], 'NIL': []}
    _user_agent = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) '
    _user_agent += 'Chrome/90.0.4430.212 Safari/537.36'
    headers = {'pragma': 'no-cache',
               'cache-control': 'no-cache',
               'sec-ch-ua': '" Not A;Brand";v="99", "Chromium";v="90"',
               'sec-ch-ua-mobile': '?0',
               'user-agent': _user_agent,
               'accept': '*/*',
               'sec-fetch-site': 'none',
               'sec-fetch-mode': 'navigate',
               'sec-fetch-dest': 'document',
               'accept-language': 'en-US,en;q=0.9'}

    for pkgname in missing:
        try:
            print(pkgname)
            pkg = as_db.get_pkg(pkgname)
            if pkg is None:
                status_pkgs['NIL'].append((pkgname, None))
                continue
            response = requests.get(pkg.url, headers=headers, timeout=0.3)
            status_pkgs[f'{response.status_code//100}XX'].append((pkg.name, pkg.url))
        except Exception:
            status_pkgs['EXC'].append((pkgname, pkg.url))
    output = pathlib.Path('/tmp/resolve_missing_urls.json')
    with output.open('w') as hJson:
        json.dump(status_pkgs, hJson)
    print("Dumped status codes from get requests to url of packages missing conf for pkgupdates")
    print(f"    {output}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Generate maintenance help')
    parser.add_argument('-r', '--resolve', action='store_true', help='Try to resolve source of missing packages')
    args = parser.parse_args()
    packages = get_packages()
    deprecated = {conf: find_conf_deprecated(packages['supported'], packages[conf], conf) for conf in CONF_NAMES}
    missing = find_conf_missing(packages)
    pending = {conf: find_conf_pending(packages['pending'], packages[conf], conf) for conf in CONF_NAMES}
    if args.resolve:
        resolve_missing_urls(missing)
