#!/usr/bin/env python
import argparse
import datetime
import email.utils
import logging
import logging.handlers
import pathlib
import git
import re
from subprocess import Popen, PIPE, STDOUT


logger = logging
REPO_URL = 'https://github.com/ArchStrike/pkgupdates.git'
home_re = re.compile(r'/home/.*?[^\\]/', re.M)


def parse_args():
    parser = argparse.ArgumentParser(description='Script for running pkgupdates as a cron job')
    parser.add_argument('-r', '--repository', type=pathlib.Path, default="/opt/pkgupdates",
                        help='Path where pkgupdates is cloned')
    parser.add_argument('-o', '--output', type=pathlib.Path, default="/data/www/public/pkgupdates.txt",
                        help='Write output to a non-default file')
    return parser.parse_args()


def config_logging(args):
    h_file = logging.handlers.RotatingFileHandler(args.output, backupCount=3)
    h_file.doRollover()
    h_file.setLevel(logging.INFO)
    h_stream = logging.StreamHandler()
    h_stream.setLevel(logging.INFO)
    logging.basicConfig(format='%(message)s', level=logging.INFO, handlers=[h_file, h_stream])


def pull_pkgupdates(args):
    if args.repository.exists():
        repo = git.Repo(args.repository)
    else:
        repo = git.Repo.clone_from(REPO_URL, args.repository)
    repo.heads.master.checkout()
    repo.remotes.origin.pull()


def get_rfc_datetime_now():
    now = datetime.datetime.now()
    return email.utils.format_datetime(now)


def run_pkgupdates(args):
    pkgupdates = pathlib.Path(args.repository, "pkgupdates")
    with Popen([pkgupdates, "-cdnf"], stdout=PIPE, stderr=STDOUT, cwd=args.repository, text=True) as proc:
        for line in proc.stdout:
            logger.info(home_re.sub('', line.rstrip()))


def run_find_conf_maintenance(args):
    find_missing = pathlib.Path(args.repository, "extras", "find-conf-maintenance")
    with Popen([find_missing], stdout=PIPE, stderr=STDOUT, cwd=args.repository, text=True) as proc:
        for line in proc.stdout:
            logger.info(home_re.sub('', line.rstrip()))


def main():
    args = parse_args()
    config_logging(args)
    pull_pkgupdates(args)
    logger.info(get_rfc_datetime_now())
    run_pkgupdates(args)
    run_find_conf_maintenance(args)
    logger.info(get_rfc_datetime_now())


if __name__ == "__main__":
    main()
